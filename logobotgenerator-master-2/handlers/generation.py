# handlers/generation.py
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import BufferedInputFile
import logging

from utils.states import GenerationStates
from utils.user_state import single_user_lock, is_generating, set_generating
from services.logo_generator import generate_image
from services.subscriptions import get_quotas, dec_gen, ensure_free_quota
from config import FREE_GEN_TRIAL
from utils.user_state import STATE_GENERATE

router = Router()

@router.message(
    F.text & (F.text.as_("txt") != None)  # –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
)
async def handle_idea(message: types.Message, state: FSMContext):
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∂–¥—ë–º –∏–¥–µ—é
    if await state.get_state() != GenerationStates.waiting_for_idea.state:
        return

    user_id = message.from_user.id

    # –≤—ã–¥–∞—ë–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–≤–æ—Ç—ã, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    ensure_free_quota(user_id, free_gen=FREE_GEN_TRIAL, free_vec=0)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–≤–æ—Ç –≤–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    q = get_quotas(user_id)
    if q["gen_left"] <= 0:
        await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞–∂–º–∏ ¬´üíé –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª –∏ –ø–æ–ø–æ–ª–Ω–∏ —Ç–∞—Ä–∏—Ñ.")
        return

    if is_generating(user_id):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        return

    async with single_user_lock(user_id):
        # –¥–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        q = get_quotas(user_id)
        if q["gen_left"] <= 0:
            await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ù–∞–∂–º–∏ ¬´üíé –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø¬ª.")
            return

        set_generating(user_id, True)
        await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

        try:
            image = await generate_image(message.text)
            image.seek(0)
            input_file = BufferedInputFile(file=image.read(), filename="logo.png")
            await message.answer_photo(photo=input_file, caption="–í–æ—Ç –ª–æ–≥–æ—Ç–∏–ø –ø–æ —Ç–≤–æ–µ–π –∏–¥–µ–µ!")

            # —Å–ø–∏—Å—ã–≤–∞–µ–º –∫–≤–æ—Ç—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if not dec_gen(user_id):
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é. –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            set_generating(user_id, False)
