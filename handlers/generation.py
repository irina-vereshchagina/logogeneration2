from aiogram import types
from aiogram.fsm.context import FSMContext
from utils.states import GenerationStates
from utils.user_state import single_user_lock, is_generating, set_generating
from services.logo_generator import generate_image
from aiogram.types import BufferedInputFile
import logging
from utils.user_roles import can_generate, increment_usage, get_usage, get_user_role, ROLE_LIMITS

from keyboards import get_back_keyboard
async def handle_idea(message: types.Message, state: FSMContext):
    state_now = await state.get_state()
    if state_now != GenerationStates.waiting_for_idea.state:
        return

    user_id = message.from_user.id

    if not message.text:
        await message.answer("‚ùóÔ∏è–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç —Å –∏–¥–µ–µ–π –ª–æ–≥–æ—Ç–∏–ø–∞.", reply_markup=get_back_keyboard())
        return

    if not can_generate(user_id):
        usage = get_usage(user_id)
        role = get_user_role(user_id)
        g_used = usage["generations"]
        g_total = ROLE_LIMITS[role]["generations"]

        await message.answer(
            f"‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç <b>–≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ª–æ–≥–æ—Ç–∏–ø–æ–≤</b>.\n\n"
            f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {g_used} / {g_total}\n"
            f"‚ÑπÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–º–∏—Ç—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'"
        , reply_markup=get_back_keyboard())
        return

    if is_generating(user_id):
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞.", reply_markup=get_back_keyboard())
        return

    async with single_user_lock(user_id):
        set_generating(user_id, True)
        await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ª–æ–≥–æ—Ç–∏–ø, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...", reply_markup=get_back_keyboard())
        try:
            image = await generate_image(message.text)
            image.seek(0)
            input_file = BufferedInputFile(file=image.read(), filename="logo.png")
            await message.answer_photo(photo=input_file, caption="–í–æ—Ç –ª–æ–≥–æ—Ç–∏–ø –ø–æ —Ç–≤–æ–µ–π –∏–¥–µ–µ!")
            await message.answer("üí° –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–¥–µ—é –∏–ª–∏ –Ω–∞–∂–º–∏ '‚¨ÖÔ∏è –í –º–µ–Ω—é'.", reply_markup=get_back_keyboard())
            increment_usage(user_id, "generations")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–≤—à–µ–º—Å—è –ª–∏–º–∏—Ç–µ
            role = get_user_role(user_id)
            usage = get_usage(user_id)
            g_left = ROLE_LIMITS[role]["generations"] - usage["generations"]
            await message.answer(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {g_left}", reply_markup=get_back_keyboard())

        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_back_keyboard())
        finally:
            set_generating(user_id, False)