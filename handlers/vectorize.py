from aiogram import types
from aiogram.types import BufferedInputFile
from keyboards import get_back_keyboard
from utils.user_state import single_user_lock, is_generating, set_generating, set_user_state, STATE_VECTORIZE
import logging
import os
import requests
from dotenv import load_dotenv
from utils.user_roles import can_vectorize, increment_usage, get_usage, get_user_role, ROLE_LIMITS

load_dotenv()

VECTORIZE_USER = os.getenv("VECTORIZE_USER")
VECTORIZE_PASS = os.getenv("VECTORIZE_PASS")

async def ask_for_image(message: types.Message):
    user_id = message.from_user.id
    role = get_user_role(user_id)
    if ROLE_LIMITS[role]["vectorizations"] == 0:
        await message.answer("‚ùå –í –≤–∞—à–µ–π —Ä–æ–ª–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Ä–æ–ª—å.", reply_markup=get_back_keyboard())
        return
    set_user_state(user_id, STATE_VECTORIZE)
    await message.answer("üì§ –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=get_back_keyboard())

async def handle_vectorization_image(message: types.Message):
    user_id = message.from_user.id

    if not can_vectorize(user_id):
        usage = get_usage(user_id)
        role = get_user_role(user_id)
        v_used = usage["vectorizations"]
        v_total = ROLE_LIMITS[role]["vectorizations"]

        await message.answer(
            f"‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç <b>–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–π</b> –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏.\n\n"
            f"üñº –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–π: {v_used} / {v_total}\n"
            f"‚ÑπÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–∏–º–∏—Ç—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'"
        , reply_markup=get_back_keyboard())
        return

    if is_generating(user_id):
        await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.", reply_markup=get_back_keyboard())
        return

    async with single_user_lock(user_id):
        set_generating(user_id, True)
        try:
            photo = message.photo[-1]
            file = await message.bot.get_file(photo.file_id)
            downloaded_file = await message.bot.download_file(file.file_path)

            temp_path = f"temp_{user_id}.jpg"
            with open(temp_path, "wb") as f:
                f.write(downloaded_file.read())

            await message.answer("üîÑ –í–µ–∫—Ç–æ—Ä–∏–∑—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=get_back_keyboard())

            with open(temp_path, "rb") as img:
                response = requests.post(
                    'https://ru.vectorizer.ai/api/v1/vectorize',
                    files={'image': img},
                    data={'mode': 'test'},
                    auth=(VECTORIZE_USER, VECTORIZE_PASS)
                )

            os.remove(temp_path)

            if response.status_code == 200:
                svg_path = f"vectorized_{user_id}.svg"
                with open(svg_path, "wb") as f:
                    f.write(response.content)

                with open(svg_path, "rb") as f:
                    svg_file = BufferedInputFile(file=f.read(), filename="vectorized.svg")
                    await message.answer_document(document=svg_file, caption="‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                os.remove(svg_path)
                increment_usage(user_id, "vectorizations")

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–≤—à–µ–º—Å—è –ª–∏–º–∏—Ç–µ
                role = get_user_role(user_id)
                usage = get_usage(user_id)
                v_left = ROLE_LIMITS[role]["vectorizations"] - usage["vectorizations"]
                await message.answer(f"üìä –û—Å—Ç–∞–ª–æ—Å—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–π: {v_left}", reply_markup=get_back_keyboard())

            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}\n{response.text}", reply_markup=get_back_keyboard())

        except Exception as e:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=get_back_keyboard())
        finally:
            set_generating(user_id, False)
